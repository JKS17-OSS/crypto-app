# **Криптографическая система с рекурсивным шифрованием**  

## **Описание**  
Веб-приложение для шифрования и дешифрования текста с использованием:  
- **Пользовательского словаря** замены символов  
- **Рекурсивного алгоритма** (многоуровневое шифрование)  
- Веб-интерфейса на **Flask**  

## **Возможности**  
✅ Шифрование текста с выбором уровня сложности (1-10)  
✅ Дешифрование ранее зашифрованных сообщений  
✅ API для интеграции с другими системами  
✅ Адаптивный веб-интерфейс  

---

## **Установка**  
1. **Требования**:  
   - Python 3.7+  
   - Flask (`pip install flask`)  

2. **Запуск**:  
   ```bash
   # Клонируйте репозиторий (если нужно)
   git clone https://github.com/ваш-репозиторий.git
   cd crypto-app

   # Запустите приложение
   python app.py
   ```
   Сервер будет доступен по адресу: [http://localhost:5000](http://localhost:5000)

---

## **Использование**  
### **Через веб-интерфейс**  
1. Откройте `http://localhost:5000`  
2. Введите текст в поле  
3. Выберите уровень шифрования (1-10)  
4. Нажмите:  
   - **«Зашифровать»** — для получения закодированного текста  
   - **«Дешифровать»** — для восстановления исходного текста  

### **Через API**  
**Шифрование**:  
```bash
curl -X POST http://localhost:5000/api/encrypt \
  -H "Content-Type: application/json" \
  -d '{"text": "Привет", "level": 3}'
```

**Дешифрование**:  
```bash
curl -X POST http://localhost:5000/api/decrypt \
  -H "Content-Type: application/json" \
  -d '{"text": "ΨδΘ", "level": 3}'
```

---

## **Структура проекта**  
```
crypto-app/
├── app.py              # Основной серверный код
└── templates/
    └── index.html      # Веб-интерфейс
```

---

## **Настройка**  
1. **Изменение словаря шифрования**:  
   Отредактируйте словарь `codes` в классе `Cryptographer` (файл `app.py`).  

2. **Ограничение уровня рекурсии**:  
   Измените `max="10"` в HTML (по умолчанию — 10 уровней).  

---

## **Примеры работы**  
**Исходный текст**: `Привет, мир!`  
**Шифрование (уровень 2)**: `ΨδΘξ, ώέ⦀`  
**Дешифрование**: `Привет, мир!`  

---

## **Разработчикам**  
- **Алгоритм**: Рекурсивное применение словаря замены  
- **Безопасность**: Не используйте для критически важных данных (учебный пример)  
- **Расширение**:  
  ```python
  # Добавьте новые символы в словарь:
  self.codes.update({'Й': '☯', 'й': '♛'})
  ```

---

## **Лицензия**  
MIT License. Свободное использование и модификация.  

---
**Автор**: [Ваше имя]  
**Версия**: 1.0